#!/bin/sh
#
# Current version: 1.8 (2011-05-04)
# https://github.com/jkossen/obu


VERSION='54'
NEW_BOOTBLOCKS="no"
BOOTDISK='ad0'
DOWNLOADDIR='/usr/snapshot'
TARGETROOT='/'

# set to 'sudo' to enable sudo, note that this is not recommended, since sudo
# from the new filesets might not work on the currently running kernel.
SUDO=''
FTP='ftp -V'
DOWNLOAD='bsd bsd.mp bsd.rd base etc man comp game xfont xetc xserv xbase xshare'
INSTALL='bsd bsd.mp bsd.rd xserv xfont xshare xbase game comp man base'
ETC='etc xetc'

if [ $(sysctl -n hw.ncpufound) -gt 1 ]; then
	echo "Using bsd.mp"
	BSD='bsd.mp'
else
	echo "Using bsd"
	BSD='bsd'
fi

if [ -n $PKG_PATH ]; then
	#MIRROR=`echo $PKG_PATH | sed "s/packages\///g"`;
	MIRROR=$(grep ^installpath /etc/pkg.conf | sed 's/packages\///g' | awk '{ print $3 }')
else
	MIRROR="ftp://ftp.eu.openbsd.org/pub/OpenBSD/snapshots/$(uname -m)"
fi

CHECKSUM_ON_UPGRADE='yes'

HOOKS_PRE_DOWNLOAD=''
HOOKS_POST_DOWNLOAD=''
HOOKS_PRE_INSTALL=''
HOOKS_POST_INSTALL=''

#######################################################################
# Container for the actual filenames (configuration defines sets, not
# filenames)
FILES=""

# Container for filenames which need to be downloaded
NEEDED_FILES=""

# Container for filenames which are already checksummed
CHECKED_FILES=""

# We need two backups of /sbin/reboot to be able to put the backup of the
# backup back in the case sysupgrade has been run multiple times for this
# snapshot/release (having /sbin/reboot and /sbin/oreboot being the same files
# does not really help one).
REBOOT="${TARGETROOT}sbin/reboot"
OREBOOT="${TARGETROOT}sbin/oreboot"
OOREBOOT="${TARGETROOT}sbin/ooreboot"

trap abort INT TERM

#######################################################################
# show usage instructions
usage()
{
    cat <<EOF

    USAGE:
    $(basename $0)  <update|upgrade|post-reboot|mergecfg|check|bootblocks|full>

    update:         download/update files
    upgrade:        check and install downloaded files, install new bootblocks
    post-reboot:    execute parts of upgrade which might have failed under the old kernel
    mergecfg:       update configuration via sysmerge(8)
    check:          check downloaded files
    bootblocks:     install new bootblocks (i386 specific)
    full:           the whole upgrade

    Copyright (c) 2004-2011 by Jochem Kossen <jochem@jkossen.nl>
    Copyright (c) 2012-2013 by Sergey Bronnikov <estetus@gmail.com>
EOF
}

abort()
{
    echo 'ABORT' >&2
    exit 1
}

fail()
{
    echo 'FAIL'
    abort
}

msg_final()
{
    echo
    msg_notice "Done installing files."
    msg_notice "There are a couple of things to remember:"
    msg_notice ""
    msg_notice "* run sysupgrade mergecfg or run sysmerge(8) manually"
    msg_notice "* look at http://www.openbsd.org/faq/current.html to see if you"
    msg_notice "  need to do any manual labour"
    msg_notice "* reboot into the new kernel. If /reboot does not work, use"
    msg_notice "  /oreboot or /ooreboot if it exists."
}

msg_error()
{
    echo "ERROR: $*" >&2
}

msg_start()
{
    echo -n " >>> $* ... "
}

msg_done()
{
    echo 'done'
}

msg_notice()
{
    echo "NOTICE: $*"
}

# The DOWNLOAD and INSTALL configuration variables contain set names (without
# the version and extension). This function converts them into filenames
sets_to_filenames()
{
    for FILE in $DOWNLOAD; do
        case $FILE in
            bsd|bsd.rd|bsd.mp)
                FILES="$FILES $FILE"
                ;;
            *)
                FILES="$FILES $FILE$VERSION.tgz"
                ;;
        esac
    done
}

# By checksumming the existing files against the SUMFILE, determine which files
# need to be downloaded
determine_needed_files()
{
    for FILE in $FILES; do
        msg_start "Checksumming $FILE to determine if it needs to be downloaded: "
        check_sum_file $FILE >/dev/null 2>&1
        if [ "$?" != "0" ]; then
            echo "yes"
            NEEDED_FILES="$NEEDED_FILES $FILE"
        else
            echo "no"
            CHECKED_FILES="$CHECKED_FILES $FILE"
        fi
    done
}

upgrade_packages()
{
	# Package upgrade and remove obsolete dependencies
	cd /tmp
	sudo pkg_delete -a
	sudo pkg_add -ui
}

# Download the latest snapshot files
download_files()
{
    DFUN="download_file_file"

    if [ ! -d "$DOWNLOADDIR" ]; then
        mkdir -p "$DOWNLOADDIR" || fail
    fi

    cd "$DOWNLOADDIR" || fail

    if [ ${MIRROR#ftp://} != $MIRROR ]; then
        DFUN="download_file_ftp"
    elif [ ${MIRROR#http://} != $MIRROR ]; then
        DFUN="download_file_ftp"
    else
        msg_error "download method not supported"
        abort
    fi

    # First download checksum file
    msg_start "Fetching SHA256 from $MIRROR:"
    $DFUN SHA256 || fail
    msg_done

    # Use checksum file to see which files are outdated/corrupt and need to be
    # downloaded
    determine_needed_files

    if [ "$NEEDED_FILES" = "" ]; then
        msg_notice "No new files found at $MIRROR"
	return 1
    else
        for FILE in $NEEDED_FILES; do
            $DFUN $FILE || fail
            check_sum_file $FILE

            [ "$?" = "1" ] && abort

            # check done, put FILE in $CHECKED_FILES
            CHECKED_FILES="$CHECKED_FILES $FILE"
        done
	return 0
    fi
}

# Create a backup of the reboot(1) command, since the new one from baseXX.tgz
# might not work on the currently running kernel
backup_reboot()
{
    if [ -f "$OREBOOT" ]; then
        SUM1=$(sha256 -q "$REBOOT")
        SUM2=$(sha256 -q "$OREBOOT")

        if [ "$SUM1" != "$SUM2" ]; then
            msg_start "Backing up $OREBOOT to $OOREBOOT"
            $SUDO cp -pf "$OREBOOT" "$OOREBOOT" || fail
            msg_done

            msg_start "Backing up $REBOOT to $OREBOOT"
            $SUDO cp -pf "$REBOOT" "$OREBOOT" || fail
            msg_done
        else
            msg_notice "$REBOOT and $OREBOOT are the same. Skipping backup"
        fi
    fi
}

# We checksum the existing reboot and oreboot files. sysupgrade might have run
# multiple times without rebooting.
check_reboot_backup()
{
    if [ -f "${OREBOOT}" ]; then
        SUM1=$(sha256 -q "$REBOOT")
        SUM2=$(sha256 -q "$OREBOOT")
        if [ "$SUM1" = "$SUM2" ]; then
            msg_notice "$REBOOT and $OREBOOT are the same."
            if [ -f "$OOREBOOT" ]; then
                msg_start "Moving back $OOREBOOT to $OREBOOT"
                $SUDO mv -f "$OOREBOOT" "$OREBOOT" || fail
                msg_done
            else
                msg_notice "$OOREBOOT does not exist. Unable to place back $OOREBOOT to $OREBOOT"
            fi
        fi
    fi
}

# Download a file from a local directory (or network mount)
download_file_file()
{
    cp -fp "${MIRROR#file://}/$1" "$DOWNLOADDIR/$1"
}

# Download a file through FTP
download_file_ftp()
{
    echo
    $FTP "$MIRROR/$1" -o "$DOWNLOADDIR/$1"
}

# Check if the checksum of the downloaded file is correct
check_sum_file()
{
    msg_start "Comparing checksum for $1"
    SUM_SHOULDBE=$(grep \($1\) "$DOWNLOADDIR/SHA256" | awk '{print $NF}')

    if [ ! -f "$DOWNLOADDIR/$1" ]; then
         msg_error "No such file: $1"
         return 1
    fi

    if [ -z "$SUM_SHOULDBE" ]; then
        # no checksum known
        echo "UNKNOWN"
        return 2
    else
        SUM_IS=$(sha256 -q "$DOWNLOADDIR/$1")
        if [ "$SUM_IS" = "$SUM_SHOULDBE" ]; then
            echo "OK"
            return 0
        else
            echo "MISMATCH"
            return 1
        fi
    fi
}

# check all downloaded files against the sums in SHA256
check_sum_all()
{
    CHECK_FILES=""
    RET=0

    # only checksum file if it wasn't already checked
    for FILE in $FILES; do
        NEED_CHECK=1
        for CHECKED_FILE in $CHECKED_FILES; do
            [ "$FILE" = "$CHECKED_FILE" ] && NEED_CHECK=0
        done

        if [ "$NEED_CHECK" = 1 ]; then
            check_sum_file "$FILE"
            [ "$?" != "0" ] && RET=1
        fi
    done

    return $RET
}

# install given kernel file into given target file. Creates a backup .old file
# first.
#
# from faq/upgrade49.html: Note the extra steps for copying over the primary
# kernel: those are done to ensure that there is always a valid copy of the
# kernel on the disk that the system can boot from should there be a really
# badly timed power outage or system crash.
install_kernel_file()
{
    FILE="$1"
    TRG="$2"

    msg_start "Installing kernel file $FILE"

    if [ -e "$TRG" ]; then
        if [ -e "${TRG}.old" ]; then
            $SUDO rm -f "${TRG}.old" || fail
        fi
        $SUDO ln "$TRG" "${TRG}.old" || fail
    fi

    $SUDO cp -f "$DOWNLOADDIR/$FILE" "${TRG}.new" || fail
    $SUDO mv -f "${TRG}.new" "$TRG" || fail

    msg_done
}

# install downloaded files
install_files()
{
    for FILE in $INSTALL; do
        case $FILE in
            bsd)
                TRG="${TARGETROOT}${FILE}"
                if [ "$BSD" != "$FILE" ]; then
                    TRG="${TARGETROOT}bsd.sp"
                fi
                install_kernel_file "$FILE" "$TRG"
                ;;
            bsd.mp)
                TRG="${TARGETROOT}${FILE}"
                if [ "$BSD" = "$FILE" ]; then
                    TRG="${TARGETROOT}bsd"
                fi
                install_kernel_file "$FILE" "$TRG"
                ;;
            bsd.rd)
                TRG="${TARGETROOT}${FILE}"
                install_kernel_file "$FILE" "$TRG"
                ;;
            etc|xetc)
                # dealt with in another function
                ;;
            *)
                msg_start "Installing set $FILE"
                $SUDO tar zxhpf "$DOWNLOADDIR/$FILE$VERSION.tgz" -C "$TARGETROOT" || fail
                msg_done
                ;;
        esac
    done
}

# install new boot blocks (i386 specific)
install_bootblocks()
{
    if [ $NEW_BOOTBLOCKS = "yes" ]; then
        msg_start "Backing up old ${TARGETROOT}boot to ${TARGETROOT}boot.old"
        $SUDO cp -f "${TARGETROOT}boot" "${TARGETROOT}boot.old" || fail
        msg_done

        msg_start "Updating ${TARGETROOT}boot"
        $SUDO cp -f "${TARGETROOT}usr/mdec/boot" "${TARGETROOT}boot" || fail
        msg_done

        msg_start "Installing new bootblocks on $BOOTDISK"
        $SUDO "${TARGETROOT}usr/mdec/installboot" "${TARGETROOT}boot" "${TARGETROOT}usr/mdec/biosboot" $BOOTDISK || fail
        msg_done
    else
        msg_notice "NEW_BOOTBLOCKS disabled. Not installing new MBR."
    fi
}

# use sysmerge to update configuration files
merge_etc()
{
    X="-s"
    for FILE in $ETC; do
        msg_notice "Merging configuration file $FILE$VERSION.tgz"
        if [ "$FILE" = "xetc" ]; then
            X="-x"
        fi
        $SUDO sysmerge $X "$DOWNLOADDIR/$FILE$VERSION.tgz" || fail
    done
	cd /dev; sudo sh ./MAKEDEV all
}

# Run custom scripts at specific moments
run_hooks()
{
    for HOOK in $*; do
        msg_notice "executing $HOOK"
        "$HOOK" || fail
    done
}

showchanges()
{
	echo "Fetching changes from current.html"
	ftp -o - -V http://www.openbsd.org/faq/current.html | \
		egrep '<li><a href="#.*">[0-9]{4}/[0-9]{2}/[0-9]{2} - .*</a>' | \
		egrep -o '[0-9]{4}/[0-9]{2}/[0-9]{2} - [^<]+'
}

unset showchanges

#######################################################################
# run
case $1 in
    bootblocks)
	[ `id -u` -ne 0 ] && echo "Root priveleges required." && exit 1
        install_bootblocks
        ;;
    check)
        sets_to_filenames
        check_sum_all
        ;;
    update)
	[ `id -u` -ne 0 ] && echo "Root priveleges required." && exit 1
        sets_to_filenames
        run_hooks $HOOKS_PRE_DOWNLOAD
        download_files
		if [ $? ]
		then
			exit 1
		else
			run_hooks $HOOKS_POST_DOWNLOAD
			showchanges
			exit 0
		fi
        ;;
    upgrade)
	[ `id -u` -ne 0 ] && echo "Root priveleges required." && exit 1
        sets_to_filenames
        if [ "$CHECKSUM_ON_UPGRADE" = "yes" ]; then
            check_sum_all || abort
        fi
        backup_reboot
        run_hooks $HOOKS_PRE_INSTALL
        install_files
        run_hooks $HOOKS_POST_INSTALL
        check_reboot_backup
        install_bootblocks
        msg_final
        ;;
    post-reboot)
	[ `id -u` -ne 0 ] && echo "Root priveleges required." && exit 1
        sets_to_filenames
        run_hooks $HOOKS_POST_INSTALL
        check_reboot_backup
        install_bootblocks
        msg_final
        ;;
    mergecfg)
	[ `id -u` -ne 0 ] && echo "Root priveleges required." && exit 1
        sets_to_filenames
        merge_etc
        ;;
    full)
	[ `id -u` -ne 0 ] && echo "Root priveleges required." && exit 1
        sets_to_filenames
        run_hooks $HOOKS_PRE_DOWNLOAD
        download_files
        if [ $? ]
        then
		echo "No update available"
		exit 0
	else
        	run_hooks $HOOKS_POST_DOWNLOAD
        	backup_reboot
        	run_hooks $HOOKS_PRE_INSTALL
        	install_files
        	run_hooks $HOOKS_POST_INSTALL
        	check_reboot_backup
        	install_bootblocks
        	merge_etc
        	exit 0
        fi
        ;;
    *)
        msg_error "Unknown option: $1"
        usage
        abort
        ;;
esac
